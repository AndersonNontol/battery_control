#include "driver/gpio.h"
#include "esp_sleep.h"
#include "freertos/idf_additions.h"
#include "freertos/projdefs.h"
#include "hal/gpio_types.h"
#include "soc/gpio_num.h"
#include "ulp_fsm_common.h"
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>

/*	When the device is just connected and after a deep sleep, the device waits for certain time before 
	going to deep sleep. The device wakes up only after the button GPIO14 is pushed. 
*/

const gpio_num_t BUTTON_PIN = GPIO_NUM_14;

extern const uint8_t ulp_ulp_program_bin_start[] asm("_binary_ulp_program_bin_start");
extern const uint8_t ulp_ulp_program_bin_end[] asm("_binary_ulp_program_bin_end");

void app_main(void)
{
	vTaskDelay(pdMS_TO_TICKS(1000));
	
	// The device is asleep
	esp_sleep_wakeup_cause_t cause = esp_sleep_get_wakeup_cause();
	if(cause != ESP_SLEEP_WAKEUP_ULP){
		printf("Not ULP wake up \n");
		printf("The program will be loaded\n");
		esp_err_t err1 = ulp_load_binary(0, ulp_ulp_program_bin_start, (ulp_ulp_program_bin_end - ulp_ulp_program_bin_start)/sizeof(uint32_t));
		ESP_ERROR_CHECK(err1);
	}
	
	else{
		printf("Woken up by the ULP");
	}
	
	// ################ CONFIGURATION FOR THE GPIO ################### //
	gpio_set_direction(BUTTON_PIN, GPIO_MODE_INPUT);
	gpio_set_pull_mode(BUTTON_PIN, GPIO_PULLDOWN_ONLY);



}
