       
       
       
       
       
 .bss
 .global soc_percent
soc_percent: .long 0
 .text
 .global entry
entry:
 MOVE R1, soc_percent
 JUMP configure
measure:
 I2C_RD 0x04, 7, 0, 0
 ST R0, R1, 0
wake_up:
 REG_RD ((((0x3ff48000 + 0xc0)) - 0x3ff48000) / 4), ((19) + ((((((((0x1) >> (0)) & 1) + (((0x1) >> (0 + 1)) & 1)) + ((((0x1) >> (0 + 2)) & 1) + (((0x1) >> (0 + 2 + 1)) & 1))) + (((((0x1) >> (0 + 4)) & 1) + (((0x1) >> (0 + 4 + 1)) & 1)) + ((((0x1) >> (0 + 4 + 2)) & 1) + (((0x1) >> (0 + 4 + 2 + 1)) & 1)))) + ((((((0x1) >> (0 + 8)) & 1) + (((0x1) >> (0 + 8 + 1)) & 1)) + ((((0x1) >> (0 + 8 + 2)) & 1) + (((0x1) >> (0 + 8 + 2 + 1)) & 1))) + (((((0x1) >> (0 + 8 + 4)) & 1) + (((0x1) >> (0 + 8 + 4 + 1)) & 1)) + ((((0x1) >> (0 + 8 + 4 + 2)) & 1) + (((0x1) >> (0 + 8 + 4 + 2 + 1)) & 1)))))) - 1), (19)
 AND R0, R0, 1
 JUMP measure, eq
 WAKE
 HALT
 .global configure
configure:
 REG_WR ((((0x3ff48C00 + 0x000)) - 0x3ff48000) / 4), ((0) + (((0x1FFFFFF)<<(0))) - 1), (0), ((40) & 0xff);
    REG_WR ((((0x3ff48C00 + 0x038)) - 0x3ff48000) / 4), ((0) + (((0xFFFFF)<<(0))) - 1), (0), ((40) & 0xff);
    REG_WR ((((0x3ff48C00 + 0x030)) - 0x3ff48000) / 4), ((0) + (((0xFFFFF)<<(0))) - 1), (0), ((16) & 0xff);
    REG_WR ((((0x3ff48C00 + 0x040)) - 0x3ff48000) / 4), ((0) + (((0xFFFFF)<<(0))) - 1), (0), ((30) & 0xff);
    REG_WR ((((0x3ff48C00 + 0x044)) - 0x3ff48000) / 4), ((0) + (((0xFFFFF)<<(0))) - 1), (0), ((44) & 0xff);
    REG_WR ((((0x3ff48C00 + 0x00c)) - 0x3ff48000) / 4), ((0) + (((0xFFFFF)<<(0))) - 1), (0), ((10000) & 0xff);
 REG_WR ((((0x3ff48C00 + 0x004)) - 0x3ff48000) / 4), (((4)) + ((1 << (4))) - 1), ((4)), ((1) & 0xff);
 REG_WR ((((0x3ff48800 + 0x003c)) - 0x3ff48000) / 4), ((11) + (((0x7FF)<<(11))) - 1), (11), ((0x36) & 0xff);
 JUMP measure
